#version 450

// On OpenGL backends, the thread group size is specified here in the compute shader.
// On non-OpenGL backends, the thread group size is specified in Veldrid's compute pipeline description.
// This should always match with the values specified in the compute pipeline.
layout(local_size_x = 16, local_size_y = 16) in;

layout(set = 0, binding = 0) uniform texture2D inputTexture;
layout(set = 0, binding = 1) uniform sampler inputSampler;
layout(set = 0, binding = 2, rgba8) writeonly uniform image2D outputTexture;

layout(set = 1, binding = 0) uniform parameters
{
    vec4 region;
    // normally we would use gl_WorkGroupSize.x * gl_NumWorkGroups.x to get the width, but that's not supported in D3D11. 
    // easiest way would be to supply it using a uniform buffer.
    int invocationWidth;
};

void main(void)
{
    if (gl_GlobalInvocationID.x >= region.z || gl_GlobalInvocationID.y >= region.w)
        return;

    ivec2 texelCoord = ivec2(region.xy + gl_GlobalInvocationID.xy);
    vec4 colour = texture(sampler2D(inputTexture, inputSampler), (vec2(texelCoord) + 0.5) / invocationWidth);
    imageStore(outputTexture, texelCoord, colour);
}